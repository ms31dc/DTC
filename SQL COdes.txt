
Question 3. Count records
How many taxi trips were there on January 15?

Consider only trips that started on January 15.

////52768
///
select    date(tpep_pickup_datetime) , date(tpep_dropoff_datetime) ,count(*)
	from public.yellow_taxi_trips
where date(tpep_pickup_datetime)='2021-01-15'
group by  date(tpep_pickup_datetime) , date(tpep_dropoff_datetime) 
/////

Question 4. Largest tip for each day
Find the largest tip for each day. On which day it was the largest tip in January?

Use the pick up time for your calculations.

(note: it's not a typo, it's "tip", not "trip")
//1140.44

///
select * from   public.yellow_taxi_trips
order by tip_amount desc
limit 15
///

Question 5. Most popular destination
What was the most popular destination for passengers picked up in central park on January 14?

Use the pick up time for your calculations.

Enter the zone name (not id). If the zone name is unknown (missing), write "Unknown"
///Upper East Side South
///
select PUL.zone as "pickup",DOL.zone as "dest",count(*) from   public.yellow_taxi_trips a 
inner join zones PUL
on  PUL.locationid=a."PULocationID"
inner join zones DOL
on DOL.locationid=a."DOLocationID"
where PUL.locationid=43 and date(a.tpep_pickup_datetime)='2021-01-14'
group by PUL.zone  ,DOL.zone  
order by 3 desc
/////


Question 6. Most expensive locations
What's the pickup-dropoff pair with the largest average price for a ride (calculated based on total_amount)?

Enter two zone names separated by a slash

For example:

"Jamaica Bay / Clinton East"

If any of the zone names are unknown (missing), write "Unknown". For example, "Unknown / Clinton East".

//// "Alphabet City / Unknown"


///
select PUL.zone as "pickup",DOL.zone as "dest",avg(total_amount) from   public.yellow_taxi_trips a 
inner join zones PUL
on  PUL.locationid=a."PULocationID"
inner join zones DOL
on DOL.locationid=a."DOLocationID"
group by PUL.zone  ,DOL.zone  
order by 3 desc
///

--------------------------
Question 1. Google Cloud SDK
Install Google Cloud SDK. What's the version you have?

To get the version, run gcloud --version
///Google Cloud SDK 369.0.0

Google Cloud account
Create an account in Google Cloud and create a project.

Question 2. Terraform
Now install terraform and go to the terraform directory (week_1_basics_n_setup/1_terraform_gcp/terraform)

After that, run

terraform init
terraform plan
terraform apply
Apply the plan and copy the output (after running apply) to the form.

It should be the entire output - from the moment you typed terraform init to the very end.
---------------------------------------------------------------------------------

C:\Users\Sai\Desktop\DataEngineer_Course\data-engineering-zoomcamp-main\week_1_basics_n_setup\1_terraform_gcp\terraform>terraform init

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/google from the dependency lock file
- Using previously-installed hashicorp/google v4.8.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

C:\Users\Sai\Desktop\DataEngineer_Course\data-engineering-zoomcamp-main\week_1_basics_n_setup\1_terraform_gcp\terraform>terraform plan
var.project
  dtc-de-322222

  Enter a value: dtc-de-322222


Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # google_bigquery_dataset.dataset will be created
  + resource "google_bigquery_dataset" "dataset" {
      + creation_time              = (known after apply)
      + dataset_id                 = "trips_data_all"
      + delete_contents_on_destroy = false
      + etag                       = (known after apply)
      + id                         = (known after apply)
      + last_modified_time         = (known after apply)
      + location                   = "us-east4"
      + project                    = "dtc-de-322222"
      + self_link                  = (known after apply)

      + access {
          + domain         = (known after apply)
          + group_by_email = (known after apply)
          + role           = (known after apply)
          + special_group  = (known after apply)
          + user_by_email  = (known after apply)

          + view {
              + dataset_id = (known after apply)
              + project_id = (known after apply)
              + table_id   = (known after apply)
            }
        }
    }

  # google_storage_bucket.data-lake-bucket will be created
  + resource "google_storage_bucket" "data-lake-bucket" {
      + force_destroy               = true
      + id                          = (known after apply)
      + location                    = "US-EAST4"
      + name                        = "dtc_data_lake_dtc-de-322222"
      + project                     = (known after apply)
      + self_link                   = (known after apply)
      + storage_class               = "STANDARD"
      + uniform_bucket_level_access = true
      + url                         = (known after apply)

      + lifecycle_rule {
          + action {
              + type = "Delete"
            }

          + condition {
              + age                   = 30
              + matches_storage_class = []
              + with_state            = (known after apply)
            }
        }

      + versioning {
          + enabled = true
        }
    }

Plan: 2 to add, 0 to change, 0 to destroy.

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.

C:\Users\Sai\Desktop\DataEngineer_Course\data-engineering-zoomcamp-main\week_1_basics_n_setup\1_terraform_gcp\terraform>terraform apply
var.project
  dtc-de-322222

  Enter a value: dtc-de-322222


Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # google_bigquery_dataset.dataset will be created
  + resource "google_bigquery_dataset" "dataset" {
      + creation_time              = (known after apply)
      + dataset_id                 = "trips_data_all"
      + delete_contents_on_destroy = false
      + etag                       = (known after apply)
      + id                         = (known after apply)
      + last_modified_time         = (known after apply)
      + location                   = "us-east4"
      + project                    = "dtc-de-322222"
      + self_link                  = (known after apply)

      + access {
          + domain         = (known after apply)
          + group_by_email = (known after apply)
          + role           = (known after apply)
          + special_group  = (known after apply)
          + user_by_email  = (known after apply)

          + view {
              + dataset_id = (known after apply)
              + project_id = (known after apply)
              + table_id   = (known after apply)
            }
        }
    }

  # google_storage_bucket.data-lake-bucket will be created
  + resource "google_storage_bucket" "data-lake-bucket" {
      + force_destroy               = true
      + id                          = (known after apply)
      + location                    = "US-EAST4"
      + name                        = "dtc_data_lake_dtc-de-322222"
      + project                     = (known after apply)
      + self_link                   = (known after apply)
      + storage_class               = "STANDARD"
      + uniform_bucket_level_access = true
      + url                         = (known after apply)

      + lifecycle_rule {
          + action {
              + type = "Delete"
            }

          + condition {
              + age                   = 30
              + matches_storage_class = []
              + with_state            = (known after apply)
            }
        }

      + versioning {
          + enabled = true
        }
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

google_bigquery_dataset.dataset: Creating...
google_storage_bucket.data-lake-bucket: Creating...
google_storage_bucket.data-lake-bucket: Creation complete after 1s [id=dtc_data_lake_dtc-de-322222]
google_bigquery_dataset.dataset: Creation complete after 1s [id=projects/dtc-de-322222/datasets/trips_data_all]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

C:\Users\Sai\Desktop\DataEngineer_Course\data-engineering-zoomcamp-main\week_1_basics_n_setup\1_terraform_gcp\terraform>


----------------------------------------------------------------------------------
